{"version":3,"sources":["logo.svg","components/Header.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","useStyles","makeStyles","theme","root","display","justifyContent","alignItems","height","appbar","background","fontFamily","appbarWrapper","width","margin","appbarTitle","flexGrow","icon","color","fontsize","colorText","container","textAlign","title","fontSize","simple","fontStyle","goDown","Header","classes","_useState","useState","_useState2","Object","slicedToArray","checked","setChecked","useEffect","react_default","a","createElement","className","id","AppBar","elevation","Toolbar","IconButton","Sort_default","Collapse","assign","in","timeout","collapsedHeight","modules","to","smooth","ExpandMore_default","App","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0RCOlCC,EAAYC,YAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SAEZC,OAAQ,SAEZC,OAAQ,CACJC,WAAY,OACZC,WAAY,UAEhBC,cAAe,CACXC,MAAO,MACPC,OAAQ,UAEZC,YAAa,CACTC,SAAU,OACVL,WAAY,UAEhBM,KAAM,CACFC,MAAO,OACPC,SAAU,QAEdC,UAAW,CACPF,MAAO,WAEXG,UAAW,CACPC,UAAW,UAEfC,MAAO,CACHL,MAAO,OACPP,WAAY,SACZa,SAAU,UAEdC,OAAQ,CACJP,MAAO,OACPP,WAAY,SACZa,SAAU,SACVE,UAAW,UAEfC,OAAQ,CACJT,MAAO,UACPM,SAAU,WAGH,SAASI,IACtB,IAAMC,EAAU5B,IADe6B,EAEDC,oBAAS,GAFRC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAExBK,EAFwBH,EAAA,GAEfI,EAFeJ,EAAA,GAO/B,OAJAK,oBAAU,WACND,GAAW,IACZ,IAGDE,EAAAC,EAAAC,cAAA,OAAKC,UAAWZ,EAAQzB,KAAMsC,GAAG,UAC/BJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQF,UAAWZ,EAAQpB,OAAQmC,UAAW,GAC5CN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAASJ,UAAWZ,EAAQjB,eACxB0B,EAAAC,EAAAC,cAAA,MAAIC,UAAWZ,EAAQd,aAAvB,SACQuB,EAAAC,EAAAC,cAAA,QAAMC,UAAWZ,EAAQT,WAAzB,WAEVkB,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACO,EAAAR,EAAD,CAAUE,UAAWZ,EAAQZ,UAKnCqB,EAAAC,EAAAC,cAACQ,EAAA,EAADf,OAAAgB,OAAA,CAAUC,GAAIf,GACTA,EAAU,CAAEgB,QAAS,KAAS,GADnC,CAEAC,gBAAiB,KACjBd,EAAAC,EAAAC,cAAA,OAAKC,UAAWZ,EAAQR,WACpBiB,EAAAC,EAAAC,cAAA,MAAIC,UAAWZ,EAAQN,OAAvB,cAAyCe,EAAAC,EAAAC,cAAA,WAAzC,QAAqD,GACrDF,EAAAC,EAAAC,cAAA,QAAMC,UAAWZ,EAAQT,WAAzB,YAKAkB,EAAAC,EAAAC,cAACa,EAAA,KAAD,CAAQC,GAAG,iBAAiBC,QAAQ,GACpCjB,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,CAAgBE,UAAWZ,EAAQF,kBCrElC8B,mLARX,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACZ,EAAD,cAJU8B,aCIZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KC9DjEC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SDYlC,WACb,GAA6C,kBAAmBnB,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,GAAwB3B,OAAOC,UAC3C2B,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,OAAQ,WAC9B,IAAMxB,EAAK,GAAAyB,OAAMH,GAAN,sBAEN7B,EAwCX,SAAiCO,GAE/B0B,MAAM1B,GACHI,KAAK,SAAAuB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C9B,UAAUC,cAAc8B,MAAM5B,KAAK,SAAAC,GACjCA,EAAa4B,aAAa7B,KAAK,WAC7BT,OAAOC,SAASsC,aAKpBnC,EAAgBC,KAGnBc,MAAM,WACLF,QAAQC,IACN,mEAzDAsB,CAAwBnC,GAHxBD,EAAgBC,MC3BxBoC","file":"static/js/main.51d7491a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.495d93cc.svg\";","import React, {useEffect, useState} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { AppBar, IconButton, Toolbar, Collapse } from '@material-ui/core';\nimport SortIcon from '@material-ui/icons/Sort';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { Link as Scroll } from 'react-scroll';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        // textAlign: 'center',\n        height: '100vh',\n    },\n    appbar: {\n        background: 'none',\n        fontFamily: 'Nunito',\n    },\n    appbarWrapper: {\n        width: '80%',\n        margin: '0 auto',\n    },\n    appbarTitle: {\n        flexGrow: '2rem',\n        fontFamily: 'Nunito',\n    },\n    icon: {\n        color: '#fff',\n        fontsize: '5rem',\n    },\n    colorText: {\n        color: '#5AFF3D',\n    },\n    container: {\n        textAlign: 'center',\n    },\n    title: {\n        color: '#fff',\n        fontFamily: 'Nunito',\n        fontSize: '4.5rem',\n    },\n    simple: {\n        color: '#fff',\n        fontFamily: 'Nunito',\n        fontSize: '5.5rem',\n        fontStyle: 'italic',\n    },\n    goDown: {\n        color: '#5AFF3D',\n        fontSize: '4rem',\n    },\n}));\nexport default function Header() {\n  const classes = useStyles();\n  const [checked, setChecked] = useState(false);\n  useEffect(() => {\n      setChecked(true);\n  }, []);\n\n  return (\n    <div className={classes.root} id='header'>\n      <AppBar className={classes.appbar} elevation={0}>\n        <Toolbar className={classes.appbarWrapper}> \n            <h1 className={classes.appbarTitle}>\n              Snake <span className={classes.colorText}>Stocks</span> \n            </h1>\n          <IconButton>\n            <SortIcon className={classes.icon}/>\n          </IconButton>\n            </Toolbar>\n      </AppBar>\n\n      <Collapse in={checked} \n      {...(checked ? { timeout: 1000 } : {})} \n      collapsedHeight={50} >\n      <div className={classes.container}>\n          <h1 className={classes.title}>Welcome to <br />Stock{''} \n          <span className={classes.colorText}>Trading</span>\n          </h1>\n          {/* <h1 className={classes.simple}>\n          <span className={classes.colorText}>Made Simple</span>\n          </h1> */}\n          <Scroll to=\"place-to-visit\" smooth={true}>\n          <IconButton>\n              <ExpandMoreIcon className={classes.goDown}/>\n          </IconButton>\n          </Scroll>\n      </div>\n      </Collapse>\n    </div>\n  );\n}\n","/* eslint-disable react/prefer-stateless-function */\nimport React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Header from './components/Header'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been pre-cached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}